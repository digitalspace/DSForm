AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates the AWS infrastructure for running an Angular app in AWS using S3, CloudFront

Resources:

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebAppBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AppBucket
                - /*
      Bucket: !Ref AppBucket
  
  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cloudfrontoriginaccessidentity.html
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity between CloudFront and S3 bucket

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
  AppDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: 
        Origins:
        - DomainName: !Sub ${AppBucket}.s3.amazonaws.com
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: 'true'
        Comment: CloudFront distribution for Angular App
        CustomErrorResponses:
        - ErrorCachingMinTTL: 5
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: 'true'
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100

  # this function is used only during deployment, 
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers: 
        # the layer contains the deployment code 
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: web-site/

      # really important: this will ensure that any change in 
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.6 
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref TargetBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:

      # the following two lines are required to 
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"

      # tell the deployer where to upload the files
      TargetBucket: !Ref TargetBucket

      Substitutions:
        FilePattern: "*.html"
        Values:
          APP_NAME: 'Example Application'
          STACK_ID: !Ref AWS::StackId
      
      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600

Outputs:
  AppBucket:
    Description: S3 Bucket hosting our demo-app
    Value: !Ref AppBucket
  DistributionId:
    Value: !Ref AppDistribution
    Description: CloudFront DistributionId
  CloudFrontURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - AppDistribution
          - DomainName
    Description: URL for website CDN